name: Staging Terraform

# Triggers on:
# - Changes to staging environment files
# - Changes to Terraform modules (except OIDC)
# - Changes to this workflow file itself (for testing workflow updates)
on:
  pull_request:
    branches: [develop]
    paths:
      - 'environments/staging/**'
      - 'modules/**'
      - '.github/workflows/staging-terraform.yml'
      - '!modules/oidc/**'
  push:
    branches: [develop]
    paths:
      - 'environments/staging/**'
      - 'modules/**'
      - '.github/workflows/staging-terraform.yml'
      - '!modules/oidc/**'

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-2"
  ENVIRONMENT: "staging"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/staging
        run: |
          terraform plan \
            -out=tfplan
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = `## Terraform Plan for Staging Environment
            
            **Environment**: Staging
            **Branch**: develop
            **Triggered by**: PR #${{ github.event.number }}`;
            
            try {
              // Use terraform show to convert binary plan to readable text
              const plan = execSync('cd environments/staging && terraform show tfplan', { encoding: 'utf8' });
              
              // Strip ANSI color codes for GitHub comment readability
              const cleanPlan = plan.replace(/\x1b\[[0-9;]*m/g, '');
              
              comment += `
              
              <details><summary>Click to expand plan</summary>
              
              \`\`\`hcl
              ${cleanPlan}
              \`\`\`
              
              </details>`;
            } catch (error) {
              comment += `
              
              ❌ **Plan Failed**
              
              The Terraform plan step failed. Check the workflow logs for details.
              
              Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Terraform Apply
        working-directory: environments/staging
        run: |
          terraform apply \
            -auto-approve

      - name: Get Outputs
        working-directory: environments/staging
        run: |
          echo "## Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY

      - name: Validate Blue-Green Deployment
        working-directory: environments/staging
        run: |
          echo "## 🔍 Blue-Green Deployment Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Wait for infrastructure to be ready
          echo "⏳ Waiting for infrastructure to be ready..."
          sleep 120  # Increased wait time to 2 minutes
          
          # Get ALB URL
          ALB_URL=$(terraform output -raw application_url)
          HEALTH_URL=$(terraform output -raw health_check_url)
          
          echo "**ALB URL**: $ALB_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check URL**: $HEALTH_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test health endpoint with better error handling
          echo "🏥 Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" $HEALTH_URL)
          HTTP_STATUS=$(echo "$HEALTH_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          HEALTH_BODY=$(echo "$HEALTH_RESPONSE" | grep -v "HTTP_STATUS:")
          
          echo "**Health HTTP Status**: $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Health Response**: $HEALTH_BODY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test main application with better error handling
          echo "🌐 Testing main application..."
          APP_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" $ALB_URL)
          APP_HTTP_STATUS=$(echo "$APP_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
          APP_BODY=$(echo "$APP_RESPONSE" | grep -v "HTTP_STATUS:")
          
          echo "**App HTTP Status**: $APP_HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**App Response**: $APP_BODY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Only try to parse JSON if we got a 200 status
          if [ "$APP_HTTP_STATUS" = "200" ]; then
            # Test if response is valid JSON
            if echo "$APP_BODY" | jq . >/dev/null 2>&1; then
              DEPLOYMENT_COLOR=$(echo "$APP_BODY" | jq -r .deployment_color)
              CONTACTS_COUNT=$(echo "$APP_BODY" | jq '.contacts | length')
              
              echo "**Deployment Color**: $DEPLOYMENT_COLOR" >> $GITHUB_STEP_SUMMARY
              echo "**Contacts Count**: $CONTACTS_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Invalid JSON Response**" >> $GITHUB_STEP_SUMMARY
              echo "Response is not valid JSON. This might indicate:" >> $GITHUB_STEP_SUMMARY
              echo "- Application is still starting up" >> $GITHUB_STEP_SUMMARY
              echo "- Database connection issues" >> $GITHUB_STEP_SUMMARY
              echo "- Application error page" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              DEPLOYMENT_COLOR="unknown"
              CONTACTS_COUNT=0
            fi
          else
            echo "❌ **Application not responding correctly**" >> $GITHUB_STEP_SUMMARY
            echo "HTTP Status: $APP_HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            DEPLOYMENT_COLOR="unknown"
            CONTACTS_COUNT=0
          fi
          
          # Validate target groups
          echo "🎯 Validating target groups..."
          BLUE_TG_ARN=$(terraform output -raw blue_target_group_arn)
          GREEN_TG_ARN=$(terraform output -raw green_target_group_arn)
          
          BLUE_HEALTH=$(aws elbv2 describe-target-health \
            --target-group-arn $BLUE_TG_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'TargetHealthDescriptions[0].TargetHealth.State' \
            --output text)
          
          GREEN_HEALTH=$(aws elbv2 describe-target-health \
            --target-group-arn $GREEN_TG_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'TargetHealthDescriptions[0].TargetHealth.State' \
            --output text)
          
          echo "**Blue Target Group Health**: $BLUE_HEALTH" >> $GITHUB_STEP_SUMMARY
          echo "**Green Target Group Health**: $GREEN_HEALTH" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check ASG status
          echo "🚀 Checking Auto Scaling Groups..."
          BLUE_ASG_NAME=$(terraform output -raw blue_asg_name)
          GREEN_ASG_NAME=$(terraform output -raw green_asg_name)
          
          BLUE_INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $BLUE_ASG_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`]' \
            --output text)
          
          GREEN_INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $GREEN_ASG_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`]' \
            --output text)
          
          echo "**Blue ASG Instances**: $(echo "$BLUE_INSTANCES" | wc -w)" >> $GITHUB_STEP_SUMMARY
          echo "**Green ASG Instances**: $(echo "$GREEN_INSTANCES" | wc -w)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Success criteria with more detailed reporting
          if [ "$APP_HTTP_STATUS" = "200" ] && [ "$DEPLOYMENT_COLOR" = "blue" ] && [ "$CONTACTS_COUNT" -gt 0 ] && [ "$BLUE_HEALTH" = "healthy" ]; then
            echo "✅ **Blue-Green Deployment Validation: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "- Application responding correctly (HTTP 200)" >> $GITHUB_STEP_SUMMARY
            echo "- Valid JSON response received" >> $GITHUB_STEP_SUMMARY
            echo "- Database connectivity confirmed ($CONTACTS_COUNT contacts)" >> $GITHUB_STEP_SUMMARY
            echo "- Target groups healthy" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for failover testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Blue-Green Deployment Validation: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Issues Found:**" >> $GITHUB_STEP_SUMMARY
            if [ "$APP_HTTP_STATUS" != "200" ]; then
              echo "- Application HTTP Status: $APP_HTTP_STATUS (expected 200)" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "$DEPLOYMENT_COLOR" != "blue" ]; then
              echo "- Deployment Color: $DEPLOYMENT_COLOR (expected blue)" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "$CONTACTS_COUNT" -eq 0 ]; then
              echo "- No contacts found (database connectivity issue)" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "$BLUE_HEALTH" != "healthy" ]; then
              echo "- Blue Target Group Health: $BLUE_HEALTH (expected healthy)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check application logs for startup issues" >> $GITHUB_STEP_SUMMARY
            echo "- Verify database connectivity and SSM automation" >> $GITHUB_STEP_SUMMARY
            echo "- Review target group health and instance status" >> $GITHUB_STEP_SUMMARY
            echo "- Wait longer for application to fully start up" >> $GITHUB_STEP_SUMMARY
            echo "- Check if instances are properly configured with the application" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
