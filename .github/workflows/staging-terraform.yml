name: Staging Terraform

# Triggers on:
# - Any change to develop branch (PR or push)
# - Excludes global-only modules, docs, and scripts that shouldn't trigger environment deployments
# - Manual trigger via workflow_dispatch
on:
  pull_request:
    branches: [develop]
    paths-ignore:
      - 'environments/global/**'
      - 'modules/oidc/**'
      - 'modules/logging/**'
      - 'modules/waf/**'
      - 'modules/secrets/**'
      - 'docs/**'
      - 'scripts/**'
  push:
    branches: [develop]
    paths-ignore:
      - 'environments/global/**'
      - 'modules/oidc/**'
      - 'modules/logging/**'
      - 'modules/waf/**'
      - 'modules/secrets/**'
      - 'docs/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild infrastructure and containers'
        required: false
        default: false
        type: boolean
      rebuild_containers_only:
        description: 'Rebuild containers only (skip infrastructure)'
        required: false
        default: false
        type: boolean
      branch:
        description: 'Branch to use for deployment'
        required: false
        default: 'develop'
        type: string

env:
  TF_VERSION: "1.12.0"
  AWS_REGION: "us-east-2"
  ENVIRONMENT: "staging"
  WORKSPACE: "staging"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.event.inputs.branch || 'develop' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-plan-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/terraform
        run: terraform init

      - name: Select Staging Workspace
        working-directory: environments/terraform
        run: |
          # Create workspace if it doesn't exist
          terraform workspace new ${{ env.WORKSPACE }} || terraform workspace select ${{ env.WORKSPACE }}

      - name: Terraform Plan
        working-directory: environments/terraform
        run: |
          terraform plan \
            -var-file=${{ env.WORKSPACE }}.tfvars \
            -out=tfplan
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = `## Terraform Plan for Staging Environment
            
            **Environment**: Staging
            **Workspace**: ${{ env.WORKSPACE }}
            **Branch**: develop
            **Triggered by**: PR #${{ github.event.number }}`;
            
            try {
              // Use terraform show to convert binary plan to readable text
              const plan = execSync('cd environments/terraform && terraform show tfplan', { encoding: 'utf8' });
              
              // Strip ANSI color codes for GitHub comment readability
              const cleanPlan = plan.replace(/\x1b\[[0-9;]*m/g, '');
              
              comment += `
              
              <details><summary>Click to expand plan</summary>
              
              \`\`\`hcl
              ${cleanPlan}
              \`\`\`
              
              </details>`;
            } catch (error) {
              comment += `
              
              ❌ **Plan Failed**
              
              The Terraform plan step failed. Check the workflow logs for details.
              
              Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.force_rebuild == 'true' || github.event.inputs.branch != ''))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.event.inputs.branch || 'develop' }}

      - name: Debug Branch and Files
        run: |
          echo "## 🔍 DEBUG INFORMATION" >> $GITHUB_STEP_SUMMARY
          echo "**Current Branch:** $(git branch --show-current)" >> $GITHUB_STEP_SUMMARY
          echo "**Git Head:** $(git rev-parse HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "**Git Status:**" >> $GITHUB_STEP_SUMMARY
          git status >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Terraform Directory Contents:**" >> $GITHUB_STEP_SUMMARY
          ls -la environments/terraform/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Staging Variables (if exists):**" >> $GITHUB_STEP_SUMMARY
          if [ -f "environments/terraform/staging.tfvars" ]; then
            cat environments/terraform/staging.tfvars >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ staging.tfvars file NOT FOUND!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/terraform
        run: terraform init

      - name: Select Staging Workspace
        working-directory: environments/terraform
        run: |
          # Create workspace if it doesn't exist
          terraform workspace new ${{ env.WORKSPACE }} || terraform workspace select ${{ env.WORKSPACE }}

      - name: Terraform Apply
        working-directory: environments/terraform
        run: |
          terraform apply \
            -var-file=${{ env.WORKSPACE }}.tfvars \
            -auto-approve

      - name: Get Outputs
        working-directory: environments/terraform
        run: |
          echo "## Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace**: ${{ env.WORKSPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY

      - name: Check for Application Changes
        id: check-changes
        run: |
          echo "## 🔍 Checking for Application Changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if force rebuild is requested
          if [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            echo "🔄 Force rebuild requested via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if app directory has changes
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^app/"; then
            echo "✅ Application code changes detected" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No application code changes detected" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if Dockerfile has changes
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "Dockerfile"; then
            echo "✅ Dockerfile changes detected" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        if: success() && steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "## 🐳 Building and Pushing Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ECR repository URL from Terraform output
          cd environments/terraform
          ECR_REPO=$(terraform output -raw ecr_repository_url 2>/dev/null || echo "")
          
          if [ -z "$ECR_REPO" ]; then
            echo "❌ ECR repository not found. ECS may not be enabled or repository not created yet." >> $GITHUB_STEP_SUMMARY
            echo "Skipping Docker build and push." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**ECR Repository:** $ECR_REPO" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract registry URL from ECR repository URL
          REGISTRY_URL=$(echo "$ECR_REPO" | cut -d'/' -f1)
          
          # Login to ECR
          echo "🔐 Logging in to ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $REGISTRY_URL
          
          # Pull existing image for cache (if it exists)
          echo "📥 Pulling existing image for cache..."
          cd ../..
          docker pull $ECR_REPO:staging-latest || echo "No existing image found, building from scratch"
          
          # Build Docker image with cache
          echo "🔨 Building Docker image with cache..."
          docker build --cache-from $ECR_REPO:staging-latest -t flask-app:latest app/
          
          # Tag for ECR with environment-specific tag
          echo "🏷️ Tagging image for ECR..."
          docker tag flask-app:latest $ECR_REPO:staging-latest
          
          # Push to ECR
          echo "📤 Pushing image to ECR..."
          docker push $ECR_REPO:staging-latest
          
          echo "✅ Docker image built and pushed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** $ECR_REPO:staging-latest" >> $GITHUB_STEP_SUMMARY

      - name: Skip Docker Build
        if: success() && steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "## ⏭️ Skipping Docker Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ No application changes detected. Using existing image." >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Only infrastructure changes detected" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to ECS
        if: success()
        working-directory: environments/terraform
        run: |
          echo "## 🚀 Deploying to ECS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ECS service information
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "")
          BLUE_SERVICE=$(terraform output -raw blue_ecs_service_name 2>/dev/null || echo "")
          
          if [ -z "$CLUSTER_NAME" ] || [ -z "$BLUE_SERVICE" ]; then
            echo "❌ ECS services not found. ECS may not be enabled." >> $GITHUB_STEP_SUMMARY
            echo "Skipping ECS deployment." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**ECS Cluster:** $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Blue Service:** $BLUE_SERVICE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deploy to blue service
          echo "🔄 Deploying to blue service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $BLUE_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ ECS deployment initiated" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** $BLUE_SERVICE" >> $GITHUB_STEP_SUMMARY

      - name: Quick Infrastructure Validation
        working-directory: environments/terraform
        run: |
          echo "## 🚀 Quick Infrastructure Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ALB DNS name
          ALB_DNS=$(terraform output -raw alb_dns_name)
          ALB_URL=$(terraform output -raw application_url)
          
          echo "**Load Balancer DNS:** $ALB_DNS" >> $GITHUB_STEP_SUMMARY
          echo "**Application URL:** $ALB_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test ALB health
          echo "🏥 Testing ALB health..."
          for i in {1..10}; do
            if curl -f -s "$ALB_URL/health/simple" > /dev/null; then
              echo "✅ ALB is healthy and responding" >> $GITHUB_STEP_SUMMARY
              break
            else
              echo "⏳ Attempt $i: ALB not ready yet, waiting..." >> $GITHUB_STEP_SUMMARY
              sleep 30
            fi
          done
          
          if [ $i -eq 10 ]; then
            echo "⚠️ ALB health check timed out after 5 minutes" >> $GITHUB_STEP_SUMMARY
          fi



      - name: Final Summary
        run: |
          echo "## 🎉 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace**: ${{ env.WORKSPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the application at the ALB URL above" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor logs in CloudWatch" >> $GITHUB_STEP_SUMMARY
          echo "3. Create PR to main branch for production deployment" >> $GITHUB_STEP_SUMMARY
