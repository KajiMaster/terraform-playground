name: Staging Terraform

# Triggers on:
# - Changes to staging environment files
# - Changes to Terraform modules (except OIDC)
# - Changes to this workflow file itself (for testing workflow updates)
on:
  pull_request:
    branches: [develop]
    paths:
      - 'environments/staging/**'
      - 'modules/**'
      - '.github/workflows/staging-terraform.yml'
      - '!modules/oidc/**'
  push:
    branches: [develop]
    paths:
      - 'environments/staging/**'
      - 'modules/**'
      - '.github/workflows/staging-terraform.yml'
      - '!modules/oidc/**'

env:
  TF_VERSION: "1.12.0"
  AWS_REGION: "us-east-2"
  ENVIRONMENT: "staging"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/staging
        run: |
          terraform plan \
            -out=tfplan
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = `## Terraform Plan for Staging Environment
            
            **Environment**: Staging
            **Branch**: develop
            **Triggered by**: PR #${{ github.event.number }}`;
            
            try {
              // Use terraform show to convert binary plan to readable text
              const plan = execSync('cd environments/staging && terraform show tfplan', { encoding: 'utf8' });
              
              // Strip ANSI color codes for GitHub comment readability
              const cleanPlan = plan.replace(/\x1b\[[0-9;]*m/g, '');
              
              comment += `
              
              <details><summary>Click to expand plan</summary>
              
              \`\`\`hcl
              ${cleanPlan}
              \`\`\`
              
              </details>`;
            } catch (error) {
              comment += `
              
              ❌ **Plan Failed**
              
              The Terraform plan step failed. Check the workflow logs for details.
              
              Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Terraform Apply
        working-directory: environments/staging
        run: |
          terraform apply \
            -auto-approve

      - name: Get Outputs
        working-directory: environments/staging
        run: |
          echo "## Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY

      - name: Validate Infrastructure Deployment
        working-directory: environments/staging
        run: |
          echo "## 🔍 Infrastructure Deployment Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Wait for infrastructure to be ready
          echo "⏳ Waiting for infrastructure to be ready..."
          sleep 30  # Reduced wait time
          
          # Get basic infrastructure info
          ALB_URL=$(terraform output -raw application_url)
          HEALTH_URL=$(terraform output -raw health_check_url)
          
          echo "**Infrastructure Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- ALB URL: $ALB_URL" >> $GITHUB_STEP_SUMMARY
          echo "- Health URL: $HEALTH_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Basic connectivity test
          echo "🔍 Testing basic connectivity..."
          if curl -s -f "$ALB_URL" >/dev/null 2>&1; then
            echo "✅ ALB is responding" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ALB is not responding" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Health check test
          echo "🏥 Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s "$HEALTH_URL")
          if [ $? -eq 0 ] && [ -n "$HEALTH_RESPONSE" ]; then
            echo "✅ Health endpoint is responding" >> $GITHUB_STEP_SUMMARY
            echo "- Response: $HEALTH_RESPONSE" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health endpoint not responding" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check target group health (basic)
          echo "🎯 Checking target group health..."
          BLUE_TG_ARN=$(terraform output -raw blue_target_group_arn)
          BLUE_HEALTH=$(aws elbv2 describe-target-health \
            --target-group-arn $BLUE_TG_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'TargetHealthDescriptions[0].TargetHealth.State' \
            --output text 2>/dev/null || echo "unknown")
          
          echo "Blue Target Group Health: $BLUE_HEALTH" >> $GITHUB_STEP_SUMMARY
          
          # Success criteria - focus on basic infrastructure working
          if [ "$BLUE_HEALTH" = "healthy" ]; then
            echo "✅ **Infrastructure Deployment: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "- ALB is responding" >> $GITHUB_STEP_SUMMARY
            echo "- Health endpoint is working" >> $GITHUB_STEP_SUMMARY
            echo "- Blue target group is healthy" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Test blue-green functionality manually using the commands in README" >> $GITHUB_STEP_SUMMARY
            echo "- Verify application functionality" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Infrastructure Deployment: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "- Blue Target Group Health: $BLUE_HEALTH (expected healthy)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
