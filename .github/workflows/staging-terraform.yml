name: Staging Terraform

# Triggers on:
# - Changes to staging environment files
# - Changes to Terraform modules (except OIDC)
# - Changes to this workflow file itself (for testing workflow updates)
on:
  pull_request:
    branches: [develop]
    paths:
      - 'environments/staging/**'
      - '.github/workflows/staging-terraform.yml'
      - '!modules/oidc/**'
  push:
    branches: [develop]
    paths:
      - 'environments/staging/**'
      - '.github/workflows/staging-terraform.yml'
      - '!modules/oidc/**'

env:
  TF_VERSION: "1.12.0"
  AWS_REGION: "us-east-2"
  ENVIRONMENT: "staging"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/staging
        run: |
          terraform plan \
            -out=tfplan
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = `## Terraform Plan for Staging Environment
            
            **Environment**: Staging
            **Branch**: develop
            **Triggered by**: PR #${{ github.event.number }}`;
            
            try {
              // Use terraform show to convert binary plan to readable text
              const plan = execSync('cd environments/staging && terraform show tfplan', { encoding: 'utf8' });
              
              // Strip ANSI color codes for GitHub comment readability
              const cleanPlan = plan.replace(/\x1b\[[0-9;]*m/g, '');
              
              comment += `
              
              <details><summary>Click to expand plan</summary>
              
              \`\`\`hcl
              ${cleanPlan}
              \`\`\`
              
              </details>`;
            } catch (error) {
              comment += `
              
              ❌ **Plan Failed**
              
              The Terraform plan step failed. Check the workflow logs for details.
              
              Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/staging
        run: terraform init

      - name: Terraform Apply
        working-directory: environments/staging
        run: |
          terraform apply \
            -auto-approve

      - name: Get Outputs
        working-directory: environments/staging
        run: |
          echo "## Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY

      - name: Build and Push Docker Image
        if: success()
        run: |
          echo "## 🐳 Building and Pushing Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ECR repository URL from Terraform output
          ECR_REPO=$(cd environments/staging && terraform output -raw ecr_repository_url)
          
          if [ -z "$ECR_REPO" ]; then
            echo "❌ ECR repository not found. ECS may not be enabled." >> $GITHUB_STEP_SUMMARY
            echo "Skipping Docker build and push." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**ECR Repository:** $ECR_REPO" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Login to ECR
          echo "🔐 Logging in to ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO
          
          # Build Docker image
          echo "🔨 Building Docker image..."
          docker build -t flask-app:latest app/
          
          # Tag for ECR
          echo "🏷️ Tagging image for ECR..."
          docker tag flask-app:latest $ECR_REPO:latest
          
          # Push to ECR
          echo "📤 Pushing image to ECR..."
          docker push $ECR_REPO:latest
          
          echo "✅ Docker image built and pushed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** $ECR_REPO:latest" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to ECS
        if: success()
        working-directory: environments/staging
        run: |
          echo "## 🚀 Deploying to ECS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ECS service information
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "")
          BLUE_SERVICE=$(terraform output -raw blue_ecs_service_name 2>/dev/null || echo "")
          
          if [ -z "$CLUSTER_NAME" ] || [ -z "$BLUE_SERVICE" ]; then
            echo "❌ ECS services not found. ECS may not be enabled." >> $GITHUB_STEP_SUMMARY
            echo "Skipping ECS deployment." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**ECS Cluster:** $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Blue Service:** $BLUE_SERVICE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deploy to blue service
          echo "🔄 Deploying to blue service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $BLUE_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ ECS deployment initiated" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** $BLUE_SERVICE" >> $GITHUB_STEP_SUMMARY

      - name: Quick Infrastructure Validation
        working-directory: environments/staging
        run: |
          echo "## 🚀 Quick Infrastructure Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ALB DNS name
          ALB_DNS=$(terraform output -raw alb_dns_name)
          ALB_URL=$(terraform output -raw application_url)
          
          echo "**Infrastructure Info:**" >> $GITHUB_STEP_SUMMARY
          echo "- ALB DNS: $ALB_DNS" >> $GITHUB_STEP_SUMMARY
          echo "- ALB URL: $ALB_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quick DNS resolution test (5 seconds max)
          echo "🔍 Testing DNS resolution..."
          if nslookup "$ALB_DNS" >/dev/null 2>&1; then
            echo "✅ ALB DNS resolves successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Infrastructure Deployment: SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Infrastructure is ready for testing" >> $GITHUB_STEP_SUMMARY
            echo "- Test blue-green functionality manually using the commands in README" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ALB DNS resolution failed" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Infrastructure Deployment: FAILED**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
