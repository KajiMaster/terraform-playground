name: Staging Terraform

# Triggers on:
# - Any change to develop branch (PR or push)
# - Excludes global-only modules, docs, and scripts that shouldn't trigger environment deployments
# - Manual trigger via workflow_dispatch
on:
  pull_request:
    branches: [develop]
    paths-ignore:
      - 'environments/global/**'
      - 'modules/oidc/**'
      - 'modules/logging/**'
      - 'modules/waf/**'
      - 'modules/secrets/**'
      - 'docs/**'
      - 'scripts/**'
  push:
    branches: [develop]
    paths-ignore:
      - 'environments/global/**'
      - 'modules/oidc/**'
      - 'modules/logging/**'
      - 'modules/waf/**'
      - 'modules/secrets/**'
      - 'docs/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Choose compute platform to deploy'
        required: true
        default: 'ecs'
        type: choice
        options:
          - 'ecs'
          - 'eks'
          - 'serverless'
      force_rebuild:
        description: 'Force rebuild infrastructure and containers'
        required: false
        default: false
        type: boolean
      rebuild_containers_only:
        description: 'Rebuild containers only (skip infrastructure)'
        required: false
        default: false
        type: boolean
      branch:
        description: 'Branch to use for deployment'
        required: false
        default: 'develop'
        type: string

env:
  TF_VERSION: "1.12.0"
  AWS_REGION: "us-east-2"
  ENVIRONMENT: "staging"
  WORKSPACE: "staging"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.event.inputs.branch || 'develop' }}

      - name: Check Changed Files
        id: check-files
        run: |
          echo "## üîç Checking Changed Files in PR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get list of changed files in the PR
          gh pr view ${{ github.event.number }} --json files --jq '.files[].path' > changed_files.txt
          
          echo "**Changed files:**" >> $GITHUB_STEP_SUMMARY
          cat changed_files.txt >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if we should run terraform plan
          should_run="false"
          
          if grep -q "environments/" changed_files.txt || \
             grep -q "modules/" changed_files.txt || \
             grep -q ".github/workflows/staging-terraform.yml" changed_files.txt; then
            should_run="true"
            echo "‚úÖ Found relevant files - will run terraform plan" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è No relevant files found - skipping terraform plan" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "should_run=$should_run" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Setup Terraform
        if: steps.check-files.outputs.should_run == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        if: steps.check-files.outputs.should_run == 'true'
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        if: steps.check-files.outputs.should_run == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-plan-${{ github.run_id }}-${{ github.run_number }}

      - name: Initialize Terraform Backend
        if: steps.check-files.outputs.should_run == 'true'
        working-directory: environments/terraform
        run: |
          echo "## üîß Backend Configuration Debug" >> $GITHUB_STEP_SUMMARY
          echo "**Event Type**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platform Input**: '${{ github.event.inputs.platform }}'" >> $GITHUB_STEP_SUMMARY
          echo "**Platform Used**: '${{ github.event.inputs.platform || 'ecs' }}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Initialize with universal backend (configured in backend.tf)
          terraform init
          
          # Select staging workspace (must already exist)
          terraform workspace select staging


      - name: Debug State
        if: steps.check-files.outputs.should_run == 'true'
        working-directory: environments/terraform
        run: |
          echo "## üîç State Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "**Current Workspace**: $(terraform workspace show)" >> $GITHUB_STEP_SUMMARY
          echo "**State Resource Count**: $(terraform state list | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**First 5 Resources in State**:" >> $GITHUB_STEP_SUMMARY
          terraform state list | head -5 >> $GITHUB_STEP_SUMMARY || echo "No resources found" >> $GITHUB_STEP_SUMMARY

      - name: Set Platform Variables
        if: steps.check-files.outputs.should_run == 'true'
        id: platform-vars
        working-directory: environments/terraform
        run: |
          echo "## üîç Platform Detection (PR Plan)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Auto-detect platform from current Terraform state
          echo "**Source**: Auto-detected from Terraform state" >> $GITHUB_STEP_SUMMARY
          
          # Check for EKS cluster in outputs
          if terraform output eks_cluster_name >/dev/null 2>&1; then
            PLATFORM="eks"
            CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
            echo "**EKS Cluster Found**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          # Check for ECS cluster in outputs  
          elif terraform output ecs_cluster_name >/dev/null 2>&1; then
            PLATFORM="ecs"
            CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
            echo "**ECS Cluster Found**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          else
            # Default to ECS for new deployments
            PLATFORM="ecs"
            echo "**No clusters found**: Defaulting to ECS for new deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Set outputs based on detected platform
          if [ "$PLATFORM" == "eks" ]; then
            echo "tfvars_file=working_eks_staging.tfvars" >> $GITHUB_OUTPUT
            echo "platform_name=EKS (Kubernetes)" >> $GITHUB_OUTPUT
          elif [ "$PLATFORM" == "serverless" ]; then
            echo "tfvars_file=serverless-staging.tfvars" >> $GITHUB_OUTPUT
            echo "platform_name=Serverless (Lambda + API Gateway)" >> $GITHUB_OUTPUT
          else
            echo "tfvars_file=working_ecs_staging.tfvars" >> $GITHUB_OUTPUT
            echo "platform_name=ECS (Fargate)" >> $GITHUB_OUTPUT
          fi
          
          echo "**Platform Selected**: $PLATFORM" >> $GITHUB_STEP_SUMMARY
          echo "**Tfvars File**: $([ "$PLATFORM" == "eks" ] && echo "working_eks_staging.tfvars" || [ "$PLATFORM" == "serverless" ] && echo "serverless-staging.tfvars" || echo "working_ecs_staging.tfvars")" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Plan
        if: steps.check-files.outputs.should_run == 'true'
        working-directory: environments/terraform
        run: |
          terraform plan \
            -var-file=${{ steps.platform-vars.outputs.tfvars_file }} \
            -out=tfplan
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v7
        if: always() && steps.check-files.outputs.should_run == 'true'
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = `## Terraform Plan for Staging Environment
            
            **Environment**: Staging
            **Platform**: ${{ steps.platform-vars.outputs.platform_name || 'Auto-detected' }}
            **Workspace**: ${{ env.WORKSPACE }}
            **Branch**: develop
            **Triggered by**: PR #${{ github.event.number }}`;
            
            try {
              // Use terraform show to convert binary plan to readable text
              const plan = execSync('cd environments/terraform && terraform show tfplan', { encoding: 'utf8' });
              
              // Strip ANSI color codes for GitHub comment readability
              const cleanPlan = plan.replace(/\x1b\[[0-9;]*m/g, '');
              
              comment += `
              
              <details><summary>Click to expand plan</summary>
              
              \`\`\`hcl
              ${cleanPlan}
              \`\`\`
              
              </details>`;
            } catch (error) {
              comment += `
              
              ‚ùå **Plan Failed**
              
              The Terraform plan step failed. Check the workflow logs for details.
              
              Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.event.inputs.branch || 'develop' }}
          fetch-depth: 0  # Need full history for changed-files to work properly

      - name: Check for Infrastructure Changes
        uses: tj-actions/changed-files@v40
        id: changed-files
        with:
          files: |
            environments/**
            modules/**
            .github/workflows/staging-terraform.yml

      - name: Skip Apply if No Changes
        if: github.event_name == 'push' && steps.changed-files.outputs.any_changed != 'true'
        run: |
          echo "## ‚è≠Ô∏è Skipping Terraform Apply" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason**: No infrastructure changes detected" >> $GITHUB_STEP_SUMMARY
          echo "**Changed files**: ${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo "**Files checked**: environments/**, modules/**, workflow file" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è To force apply anyway, use workflow_dispatch manual trigger" >> $GITHUB_STEP_SUMMARY
          exit 0

      - name: Debug Branch and Files
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "## üîç DEBUG INFORMATION" >> $GITHUB_STEP_SUMMARY
          echo "**Current Branch:** $(git branch --show-current)" >> $GITHUB_STEP_SUMMARY
          echo "**Git Head:** $(git rev-parse HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "**Git Status:**" >> $GITHUB_STEP_SUMMARY
          git status >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Terraform Directory Contents:**" >> $GITHUB_STEP_SUMMARY
          ls -la environments/terraform/ >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Staging Variables (if exists):**" >> $GITHUB_STEP_SUMMARY
          if [ -f "environments/terraform/staging.tfvars" ]; then
            cat environments/terraform/staging.tfvars >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå staging.tfvars file NOT FOUND!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Terraform
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: staging-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Initialize Terraform Backend
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        working-directory: environments/terraform
        run: |
          echo "## üîß Backend Configuration" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: ${{ github.event.inputs.platform || 'ecs' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Initialize with universal backend (configured in backend.tf)
          terraform init
          
          # Select staging workspace (must already exist)
          terraform workspace select staging

      - name: Set Platform Variables
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        id: platform-vars
        working-directory: environments/terraform
        run: |
          echo "## üîç Platform Detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # For workflow_dispatch, use the input parameter
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.platform }}" ]; then
            PLATFORM="${{ github.event.inputs.platform }}"
            echo "**Source**: Manual workflow input" >> $GITHUB_STEP_SUMMARY
          else
            # Auto-detect platform from current Terraform state
            echo "**Source**: Auto-detected from Terraform state" >> $GITHUB_STEP_SUMMARY
            
            # Check for EKS cluster in outputs
            if terraform output eks_cluster_name >/dev/null 2>&1; then
              PLATFORM="eks"
              CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
              echo "**EKS Cluster Found**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
            # Check for ECS cluster in outputs  
            elif terraform output ecs_cluster_name >/dev/null 2>&1; then
              PLATFORM="ecs"
              CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
              echo "**ECS Cluster Found**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
            else
              # Default to ECS for new deployments
              PLATFORM="ecs"
              echo "**No clusters found**: Defaulting to ECS for new deployment" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Set outputs based on detected/selected platform
          if [ "$PLATFORM" == "eks" ]; then
            echo "tfvars_file=working_eks_staging.tfvars" >> $GITHUB_OUTPUT
            echo "platform_name=EKS (Kubernetes)" >> $GITHUB_OUTPUT
            echo "platform=eks" >> $GITHUB_OUTPUT
          elif [ "$PLATFORM" == "serverless" ]; then
            echo "tfvars_file=serverless-staging.tfvars" >> $GITHUB_OUTPUT
            echo "platform_name=Serverless (Lambda + API Gateway)" >> $GITHUB_OUTPUT
            echo "platform=serverless" >> $GITHUB_OUTPUT
          else
            echo "tfvars_file=working_ecs_staging.tfvars" >> $GITHUB_OUTPUT
            echo "platform_name=ECS (Fargate)" >> $GITHUB_OUTPUT
            echo "platform=ecs" >> $GITHUB_OUTPUT
          fi
          
          echo "**Platform Selected**: $PLATFORM" >> $GITHUB_STEP_SUMMARY
          echo "**Tfvars File**: $([ "$PLATFORM" == "eks" ] && echo "working_eks_staging.tfvars" || [ "$PLATFORM" == "serverless" ] && echo "serverless-staging.tfvars" || echo "working_ecs_staging.tfvars")" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        working-directory: environments/terraform
        run: |
          terraform apply \
            -var-file=${{ steps.platform-vars.outputs.tfvars_file }} \
            -auto-approve

      - name: Get Outputs
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        working-directory: environments/terraform
        run: |
          echo "## Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace**: ${{ env.WORKSPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY

      - name: Check for Application Changes
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        id: check-changes
        run: |
          echo "## üîç Checking for Application Changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if force rebuild is requested
          if [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            echo "üîÑ Force rebuild requested via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if app directory has changes (for push events)
          if [ "${{ github.event_name }}" == "push" ]; then
            if echo "${{ github.event.commits.*.modified }}" | grep -q "app/" || \
               echo "${{ github.event.commits.*.added }}" | grep -q "app/" || \
               echo "${{ github.event.commits.*.removed }}" | grep -q "app/"; then
              echo "‚úÖ Application code changes detected" >> $GITHUB_STEP_SUMMARY
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è No application code changes detected" >> $GITHUB_STEP_SUMMARY
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            # For workflow_dispatch, assume changes
            echo "üîÑ Manual trigger - assuming changes" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if Dockerfile has changes
          if echo "${{ github.event.commits.*.modified }}" | grep -q "Dockerfile" || \
             echo "${{ github.event.commits.*.added }}" | grep -q "Dockerfile" || \
             echo "${{ github.event.commits.*.removed }}" | grep -q "Dockerfile"; then
            echo "‚úÖ Dockerfile changes detected" >> $GITHUB_STEP_SUMMARY
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        if: success() && steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "## üê≥ Building and Pushing Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ECR repository URL from Terraform output
          cd environments/terraform
          ECR_REPO=$(terraform output -raw ecr_repository_url 2>/dev/null || echo "")
          
          if [ -z "$ECR_REPO" ]; then
            echo "‚ùå ECR repository not found. ECS may not be enabled or repository not created yet." >> $GITHUB_STEP_SUMMARY
            echo "Skipping Docker build and push." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**ECR Repository:** $ECR_REPO" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract registry URL from ECR repository URL
          REGISTRY_URL=$(echo "$ECR_REPO" | cut -d'/' -f1)
          
          # Login to ECR
          echo "üîê Logging in to ECR..."
          PASSWORD=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})
          echo "$PASSWORD" | docker login --username AWS --password-stdin $REGISTRY_URL
          
          # Pull existing image for cache (if it exists)
          echo "üì• Pulling existing image for cache..."
          cd ../..
          docker pull $ECR_REPO:staging-latest || echo "No existing image found, building from scratch"
          
          # Build Docker image with cache
          echo "üî® Building Docker image with cache..."
          docker build --cache-from $ECR_REPO:staging-latest -t flask-app:latest app/
          
          # Tag for ECR with environment-specific tag
          echo "üè∑Ô∏è Tagging image for ECR..."
          docker tag flask-app:latest $ECR_REPO:staging-latest
          
          # Push to ECR
          echo "üì§ Pushing image to ECR..."
          docker push $ECR_REPO:staging-latest
          
          echo "‚úÖ Docker image built and pushed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** $ECR_REPO:staging-latest" >> $GITHUB_STEP_SUMMARY

      - name: Skip Docker Build
        if: success() && steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "## ‚è≠Ô∏è Skipping Docker Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è No application changes detected. Using existing image." >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Only infrastructure changes detected" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to ECS
        if: success() && steps.platform-vars.outputs.platform == 'ecs'
        working-directory: environments/terraform
        run: |
          echo "## üöÄ Deploying to ECS (Fargate)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ECS service information
          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "")
          BLUE_SERVICE=$(terraform output -raw blue_ecs_service_name 2>/dev/null || echo "")
          
          if [ -z "$CLUSTER_NAME" ] || [ -z "$BLUE_SERVICE" ]; then
            echo "‚ùå ECS services not found. ECS may not be enabled." >> $GITHUB_STEP_SUMMARY
            echo "Skipping ECS deployment." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**ECS Cluster:** $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Blue Service:** $BLUE_SERVICE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deploy to blue service
          echo "üîÑ Deploying to blue service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $BLUE_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ ECS deployment initiated" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** $BLUE_SERVICE" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to EKS
        if: success() && steps.platform-vars.outputs.platform == 'eks'
        working-directory: environments/terraform
        run: |
          echo "## üöÄ Deploying to EKS (Kubernetes)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get EKS cluster information
          CLUSTER_NAME=$(terraform output -raw eks_cluster_name 2>/dev/null || echo "")
          
          if [ -z "$CLUSTER_NAME" ]; then
            echo "‚ùå EKS cluster not found. EKS may not be enabled." >> $GITHUB_STEP_SUMMARY
            echo "Skipping EKS deployment." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "**EKS Cluster:** $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Update kubeconfig
          echo "üîß Updating kubeconfig..."
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $CLUSTER_NAME
          
          # For now, just verify cluster access
          echo "üîç Verifying cluster access..."
          kubectl get nodes
          kubectl get pods --all-namespaces
          
          echo "‚úÖ EKS cluster access verified" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** EKS application deployment requires additional K8s manifests" >> $GITHUB_STEP_SUMMARY

      - name: Quick Infrastructure Validation
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        working-directory: environments/terraform
        run: |
          echo "## üöÄ Quick Infrastructure Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get ALB DNS name
          ALB_DNS=$(terraform output -raw alb_dns_name)
          ALB_URL=$(terraform output -raw application_url)
          
          echo "**Load Balancer DNS:** $ALB_DNS" >> $GITHUB_STEP_SUMMARY
          echo "**Application URL:** $ALB_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test ALB health
          echo "üè• Testing ALB health..."
          for i in {1..10}; do
            if curl -f -s "$ALB_URL/health/simple" > /dev/null; then
              echo "‚úÖ ALB is healthy and responding" >> $GITHUB_STEP_SUMMARY
              break
            else
              echo "‚è≥ Attempt $i: ALB not ready yet, waiting..." >> $GITHUB_STEP_SUMMARY
              sleep 30
            fi
          done
          
          if [ $i -eq 10 ]; then
            echo "‚ö†Ô∏è ALB health check timed out after 5 minutes" >> $GITHUB_STEP_SUMMARY
          fi



      - name: Final Summary
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "## üéâ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: ${{ steps.platform-vars.outputs.platform_name || 'Legacy' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace**: ${{ env.WORKSPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ‚úÖ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the application at the ALB URL above" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor logs in CloudWatch" >> $GITHUB_STEP_SUMMARY
          echo "3. Create PR to main branch for production deployment" >> $GITHUB_STEP_SUMMARY
