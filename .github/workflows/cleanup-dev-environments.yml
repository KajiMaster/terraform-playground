name: Cleanup Dev Environments

on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  AWS_REGION: us-east-2
  TF_VERSION: "1.5.0"

jobs:
  cleanup:
    name: Cleanup Dev Environment for ${{ github.event.pull_request.user.login }}
    runs-on: ubuntu-latest

    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-staging
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get Developer Name
        id: developer
        run: |
          # Use GitHub username as developer name
          echo "developer=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "Cleaning up dev environment for: ${{ github.event.pull_request.user.login }}"

      - name: Check if Dev Environment Exists
        id: check_env
        run: |
          cd environments/dev
          export TF_VAR_developer=${{ steps.developer.outputs.developer }}

          # Check if state file exists
          if aws s3api head-object --bucket tf-playground-state-vexus --key "dev-${{ steps.developer.outputs.developer }}/terraform.tfstate" 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Dev environment found for ${{ steps.developer.outputs.developer }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No dev environment found for ${{ steps.developer.outputs.developer }}"
          fi

      - name: Initialize Terraform
        if: steps.check_env.outputs.exists == 'true'
        run: |
          cd environments/dev
          export TF_VAR_developer=${{ steps.developer.outputs.developer }}
          terraform init

      - name: Destroy Dev Environment
        if: steps.check_env.outputs.exists == 'true'
        run: |
          cd environments/dev
          export TF_VAR_developer=${{ steps.developer.outputs.developer }}
          terraform destroy -auto-approve

      - name: Clean Up Secrets
        if: steps.check_env.outputs.exists == 'true'
        run: |
          # Clean up developer-specific secrets
          SECRET_NAME="/tf-playground/dev-${{ steps.developer.outputs.developer }}/database/credentials"

          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" 2>/dev/null; then
            echo "Cleaning up secret: $SECRET_NAME"
            aws secretsmanager delete-secret --secret-id "$SECRET_NAME" --force-delete-without-recovery
          else
            echo "Secret $SECRET_NAME not found, skipping cleanup"
          fi

      - name: Clean Up SSH Key
        if: steps.check_env.outputs.exists == 'true'
        run: |
          # Clean up developer-specific SSH key
          KEY_NAME="tf-playground-dev-${{ steps.developer.outputs.developer }}"

          if aws ec2 describe-key-pairs --key-names "$KEY_NAME" 2>/dev/null; then
            echo "Cleaning up SSH key: $KEY_NAME"
            aws ec2 delete-key-pair --key-name "$KEY_NAME"
          else
            echo "SSH key $KEY_NAME not found, skipping cleanup"
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const developer = '${{ steps.developer.outputs.developer }}';
            const exists = '${{ steps.check_env.outputs.exists }}';

            let message = `#### Dev Environment Cleanup üßπ
            *Workflow: \`${{ github.workflow }}\`*

            **Developer**: @${developer}
            **Status**: ${exists === 'true' ? '‚úÖ Cleaned up' : '‚ÑπÔ∏è No environment found'}

            ${exists === 'true' ? `
            **Resources Destroyed**:
            - Individual dev environment
            - Developer-specific secrets
            - SSH key pair
            - State file

            **Cost Savings**: Dev environment resources have been cleaned up to save costs.
            ` : `
            **Note**: No individual dev environment was found for this developer.
            `}

            *Pusher: @${{ github.actor }}, Action: \`cleanup\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Send Notification
        if: steps.check_env.outputs.exists == 'true'
        run: |
          echo "‚úÖ Dev environment cleanup completed for ${{ steps.developer.outputs.developer }}"
          echo "üìä Cost savings: Individual dev environment destroyed"
          echo "üîí Security: Developer-specific secrets and keys cleaned up"
