name: Terraform Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options: ["staging", "production"]
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options: ["plan", "apply", "destroy"]

env:
  AWS_REGION: us-east-2
  TF_VERSION: "1.5.0"

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }} - ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest

    # Only allow manual triggers for apply/destroy on production
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main')

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-terraform
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Force Unlock State (if needed)
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          # Try to unlock any existing locks
          terraform force-unlock -force 87bd88f2-f0db-9c68-64ba-f68584a41104 || echo "Lock already released or doesn't exist"
          terraform force-unlock -force 440a9745-6d8b-84a7-81a0-387c49f633f0 || echo "Lock already released or doesn't exist"
        continue-on-error: true

      - name: Check State File Exists
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          echo "Checking if state file exists in S3..."
          aws s3 ls s3://tf-playground-state-vexus/staging/terraform.tfstate || echo "State file does not exist - this is a first-time setup"

      - name: Terraform Format Check
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          terraform fmt -check

      - name: Terraform Init
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          echo "Starting terraform init..."
          timeout 300 terraform init
          echo "Terraform init completed successfully"

      - name: Debug Terraform Configuration
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          echo "=== Terraform Configuration ==="
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo ""
          echo "=== Terraform Variables ==="
          echo "Variables file check:"
          ls -la *.tfvars 2>/dev/null || echo "No .tfvars files found"
          echo ""
          echo "=== Backend Configuration ==="
          cat backend.tf || echo "No backend.tf found"
          echo ""
          echo "=== Main Configuration ==="
          head -20 main.tf || echo "No main.tf found"

      - name: Terraform Plan
        id: plan
        if: |
          github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply') ||
          github.event_name == 'pull_request'
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          echo "Running terraform plan..."
          echo "Current directory: $(pwd)"
          echo "Files before plan:"
          ls -la
          # For first-time setup, we might need to handle missing state gracefully
          timeout 600 terraform plan -out=tfplan -lock=false || timeout 600 terraform plan -out=tfplan
          echo "Plan completed. Checking if tfplan file exists..."
          ls -la tfplan || echo "tfplan file not found!"
        continue-on-error: true

      - name: Capture Plan Output
        id: plan_output
        if: github.event_name == 'pull_request'
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          if [ -f tfplan ]; then
            terraform show tfplan > plan_output.txt
            echo "plan_output<<EOF" >> $GITHUB_OUTPUT
            cat plan_output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "plan_output<<EOF" >> $GITHUB_OUTPUT
            echo "Terraform plan file not found. Check the plan step for errors." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Plan failed or has changes that require review."
          exit 1

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'staging'
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          terraform apply -auto-approve tfplan

      - name: Terraform Apply (Production)
        if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'production'
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          terraform apply -auto-approve tfplan
        env:
          TF_VAR_environment: production

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}
          terraform destroy -auto-approve

      - name: Comment PR
        if: github.event_name == 'pull_request'
        run: |
          cd environments/${{ github.event.inputs.environment || 'staging' }}

          # Create the comment content
          cat > comment.txt << 'EOF'
          #### Terraform Plan ðŸ“‹
          *Workflow: `${{ github.workflow }}`*

          <details><summary>Show Plan</summary>

          ```
          EOF

          # Add the plan output
          if [ -f plan_output.txt ]; then
            cat plan_output.txt >> comment.txt
          else
            echo "Plan output not available" >> comment.txt
          fi

          # Close the comment
          cat >> comment.txt << 'EOF'
          ```

          </details>

          *Pusher: @${{ github.actor }}, Action: `${{ github.event.inputs.action || 'plan' }}`*
          EOF

          # Post the comment
          gh pr comment ${{ github.event.pull_request.number }} --body-file comment.txt
