name: Production Terraform

on:
  pull_request:
    branches: [main]
    paths:
      - 'environments/production/**'
      - 'modules/**'
      - '!modules/oidc/**'
  push:
    branches: [main]
    paths:
      - 'environments/production/**'
      - 'modules/**'
      - '!modules/oidc/**'

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-2"
  ENVIRONMENT: "production"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: production-plan-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/production
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/production
        run: |
          terraform plan \
            -out=tfplan
        continue-on-error: true

      - name: Comment Plan
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            let comment = `## üö® PRODUCTION Terraform Plan
            
            **‚ö†Ô∏è WARNING: This is a PRODUCTION deployment**
            **Environment**: Production
            **Branch**: main
            **Triggered by**: PR #${{ github.event.number }}
            
            **Please review carefully before merging!**`;
            
            try {
              // Use terraform show to convert binary plan to readable text
              const plan = execSync('cd environments/production && terraform show tfplan', { encoding: 'utf8' });
              
              // Strip ANSI color codes for GitHub comment readability
              const cleanPlan = plan.replace(/\x1b\[[0-9;]*m/g, '');
              
              comment += `
              
              <details><summary>Click to expand PRODUCTION plan</summary>
              
              \`\`\`hcl
              ${cleanPlan}
              \`\`\`
              
              </details>
              
              **‚ö†Ô∏è PRODUCTION DEPLOYMENT WARNING:**
              - This will create production infrastructure
              - Costs will be incurred
              - Ensure all changes are reviewed and approved
              - Consider testing in staging first`;
            } catch (error) {
              comment += `
              
              ‚ùå **Production Plan Failed**
              
              The Terraform plan step failed. Check the workflow logs for details.
              
              Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clear AWS Credentials Cache
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          unset AWS_DEFAULT_REGION
          rm -rf ~/.aws/credentials
          rm -rf ~/.aws/config
          echo "Cleared all AWS credentials cache"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123324351829:role/github-actions-global
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: production-apply-${{ github.run_id }}-${{ github.run_number }}

      - name: Terraform Init
        working-directory: environments/production
        run: terraform init

      - name: Terraform Apply
        working-directory: environments/production
        run: |
          terraform apply \
            -auto-approve

      - name: Get Outputs
        working-directory: environments/production
        run: |
          echo "## üö® PRODUCTION Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è WARNING: This is a PRODUCTION environment**" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY

      - name: Production Deployment Notification
        run: |
          echo "## üéâ PRODUCTION DEPLOYMENT SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Production environment has been deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Verify production application is accessible" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application performance and logs" >> $GITHUB_STEP_SUMMARY
          echo "- Set up monitoring and alerting if needed" >> $GITHUB_STEP_SUMMARY
          echo "- Document any production-specific configurations" >> $GITHUB_STEP_SUMMARY 